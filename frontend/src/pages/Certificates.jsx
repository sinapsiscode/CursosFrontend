import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuthStore, useProgressStore, useCourseStore, useUIStore } from '../store'
import { LoadingSpinner } from '../components/common'
import { apiService } from '../services/api'

const Certificates = () => {
  const navigate = useNavigate()
  const { user, isAuthenticated } = useAuthStore()
  const { certificates, completedCourses, courseProgress } = useProgressStore()
  const { courses, setCourses } = useCourseStore()
  const { showToast } = useUIStore()
  const [loading, setLoading] = useState(true)
  const [certificatesWithDetails, setCertificatesWithDetails] = useState([])
  const [filter, setFilter] = useState('all') // all, recent, by-area
  const [selectedArea, setSelectedArea] = useState('all')
  const [selectedCertificate, setSelectedCertificate] = useState(null)
  const [showPreview, setShowPreview] = useState(false)

  const areas = {
    metalurgia: { name: 'Metalurgia', color: 'text-orange-400', bg: 'bg-orange-500' },
    mineria: { name: 'Minería', color: 'text-yellow-400', bg: 'bg-yellow-500' },
    geologia: { name: 'Geología', color: 'text-green-400', bg: 'bg-green-500' }
  }

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/area-selection')
      return
    }
    loadCertificates()
  }, [isAuthenticated])

  const loadCertificates = async () => {
    try {
      setLoading(true)
      
      // Cargar todos los cursos
      const allCourses = await apiService.getCourses()
      setCourses(allCourses)
      
      // Combinar certificados con información detallada del curso
      const certificatesWithCourseInfo = certificates.map(certificate => {
        const course = allCourses.find(c => c.id === certificate.courseId)
        const progress = courseProgress[certificate.courseId]
        
        return {
          ...certificate,
          course: course || { title: 'Curso no encontrado', area: 'unknown' },
          completedAt: certificate.completedAt || progress?.lastWatched || new Date(),
          verificationCode: `METSEL-${certificate.courseId}-${user.id}-${Date.now().toString().slice(-6)}`
        }
      })
      
      // Generar certificados automáticos para cursos completados que no tienen certificado
      const existingCertCourseIds = certificates.map(cert => cert.courseId)
      const autoGeneratedCerts = completedCourses
        .filter(courseId => !existingCertCourseIds.includes(courseId))
        .map(courseId => {
          const course = allCourses.find(c => c.id === courseId)
          const progress = courseProgress[courseId]
          
          return {
            id: `auto_cert_${courseId}_${user.id}`,
            courseId: courseId,
            courseName: course?.title || 'Curso',
            area: course?.area || 'general',
            completedAt: progress?.lastWatched || new Date(),
            course: course,
            verificationCode: `METSEL-${courseId}-${user.id}-${Date.now().toString().slice(-6)}`,
            isAutoGenerated: true
          }
        })
      
      setCertificatesWithDetails([...certificatesWithCourseInfo, ...autoGeneratedCerts])
      
    } catch (error) {
      console.error('Error loading certificates:', error)
      showToast('Error al cargar los certificados', 'error')
    } finally {
      setLoading(false)
    }
  }

  const getFilteredCertificates = () => {
    let filtered = [...certificatesWithDetails]
    
    // Filtrar por área
    if (selectedArea !== 'all') {
      filtered = filtered.filter(cert => cert.area === selectedArea)
    }
    
    // Ordenar por fecha
    filtered.sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt))
    
    // Aplicar filtro de tiempo
    if (filter === 'recent') {
      const thirtyDaysAgo = new Date()
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
      filtered = filtered.filter(cert => new Date(cert.completedAt) > thirtyDaysAgo)
    }
    
    return filtered
  }

  const handleDownloadCertificate = async (certificate) => {
    try {
      showToast('Generando certificado...', 'info')
      
      const response = await apiService.generateCertificate(user.id, certificate.courseId)
      
      if (response.success) {
        // Simular descarga
        const link = document.createElement('a')
        link.href = response.downloadUrl
        link.download = `certificado-${certificate.courseName.replace(/\s+/g, '-').toLowerCase()}.pdf`
        link.click()
        
        showToast('Certificado descargado exitosamente', 'success')
      }
    } catch (error) {
      console.error('Error downloading certificate:', error)
      showToast('Error al descargar el certificado', 'error')
    }
  }

  const handleShareCertificate = async (certificate) => {
    const shareData = {
      title: `Certificado de ${certificate.courseName}`,
      text: `¡He completado el curso "${certificate.courseName}" en MetSel Academy!`,
      url: `${window.location.origin}/certificate/verify/${certificate.verificationCode}`
    }

    if (navigator.share) {
      try {
        await navigator.share(shareData)
        showToast('Certificado compartido', 'success')
      } catch (error) {
        if (error.name !== 'AbortError') {
          fallbackShare(shareData)
        }
      }
    } else {
      fallbackShare(shareData)
    }
  }

  const fallbackShare = (shareData) => {
    navigator.clipboard.writeText(`${shareData.text} ${shareData.url}`)
    showToast('Enlace copiado al portapapeles', 'success')
  }

  const handlePreviewCertificate = (certificate) => {
    setSelectedCertificate(certificate)
    setShowPreview(true)
  }

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const CertificateCard = ({ certificate }) => (
    <div className="bg-surface rounded-xl overflow-hidden hover:shadow-lg transition-all duration-300 group">
      {/* Header del certificado */}
      <div className={`${areas[certificate.area]?.bg || 'bg-gray-500'} p-6 text-white relative overflow-hidden`}>
        <div className="absolute top-0 right-0 transform translate-x-6 -translate-y-6">
          <div className="w-32 h-32 bg-white bg-opacity-10 rounded-full"></div>
        </div>
        <div className="relative z-10">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-white bg-opacity-20 rounded-lg flex items-center justify-center">
                <span className="font-bold text-sm">M</span>
              </div>
              <span className="font-bold">MetSel Academy</span>
            </div>
            <div className="text-xs bg-white bg-opacity-20 px-2 py-1 rounded">
              {areas[certificate.area]?.name || 'General'}
            </div>
          </div>
          
          <h3 className="text-lg font-bold mb-2 line-clamp-2">
            {certificate.courseName}
          </h3>
          
          <div className="flex items-center justify-between text-sm opacity-90">
            <span>{user?.name}</span>
            <span>{formatDate(certificate.completedAt)}</span>
          </div>
        </div>
      </div>

      {/* Contenido del certificado */}
      <div className="p-6">
        <div className="mb-4">
          <div className="flex items-center space-x-2 mb-2">
            <svg className="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-sm font-medium text-green-500">Curso Completado</span>
          </div>
          
          {certificate.course && (
            <div className="text-sm text-text-secondary mb-3">
              <p><strong>Instructor:</strong> {certificate.course.instructor}</p>
              <p><strong>Duración:</strong> {Math.floor(certificate.course.duration / 60)}h {certificate.course.duration % 60}m</p>
            </div>
          )}
          
          <div className="text-xs text-text-secondary bg-background rounded p-2">
            <strong>Código de verificación:</strong><br />
            <code className="font-mono">{certificate.verificationCode}</code>
          </div>
        </div>

        {/* Acciones */}
        <div className="flex space-x-2">
          <button
            onClick={() => handlePreviewCertificate(certificate)}
            className="flex-1 bg-background text-white py-2 px-4 rounded-lg font-medium hover:bg-gray-700 transition-colors flex items-center justify-center space-x-2"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            <span>Vista Previa</span>
          </button>
          
          <button
            onClick={() => handleDownloadCertificate(certificate)}
            className="bg-accent text-background py-2 px-4 rounded-lg font-medium hover:bg-opacity-90 transition-colors"
            title="Descargar PDF"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </button>
          
          <button
            onClick={() => handleShareCertificate(certificate)}
            className="bg-blue-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            title="Compartir"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  )

  const CertificatePreview = ({ certificate, onClose }) => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl p-8 w-full max-w-4xl relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 transition-colors"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>

        {/* Vista previa del certificado */}
        <div className="bg-gradient-to-br from-blue-50 to-indigo-100 p-12 rounded-lg text-center border-8 border-indigo-200">
          <div className="mb-8">
            <div className="flex items-center justify-center space-x-2 mb-4">
              <div className="w-12 h-12 bg-accent rounded-lg flex items-center justify-center">
                <span className="text-background font-bold text-xl">M</span>
              </div>
              <div className="text-left">
                <div className="text-2xl font-bold text-gray-800">MetSel</div>
                <div className="text-sm text-gray-600">Academy</div>
              </div>
            </div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">Certificado de Finalización</h1>
            <p className="text-gray-600">Se otorga el presente certificado a</p>
          </div>

          <div className="mb-8">
            <h2 className="text-4xl font-bold text-indigo-800 mb-4">{user?.name}</h2>
            <p className="text-lg text-gray-700 mb-2">Por completar exitosamente el curso</p>
            <h3 className="text-2xl font-bold text-gray-800 mb-4">"{certificate.courseName}"</h3>
            <p className="text-gray-600">en el área de <strong>{areas[certificate.area]?.name}</strong></p>
          </div>

          <div className="flex justify-between items-end">
            <div className="text-left">
              <div className="border-t-2 border-gray-400 pt-2 mb-2">
                <p className="text-sm text-gray-600">Fecha de finalización</p>
                <p className="font-semibold">{formatDate(certificate.completedAt)}</p>
              </div>
            </div>
            
            <div className="text-center">
              <div className="w-20 h-20 bg-accent rounded-full flex items-center justify-center mb-2">
                <svg className="w-10 h-10 text-background" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <p className="text-xs text-gray-500">Verificado</p>
            </div>
            
            <div className="text-right">
              <div className="border-t-2 border-gray-400 pt-2 mb-2">
                <p className="text-sm text-gray-600">Código de verificación</p>
                <p className="font-mono text-xs">{certificate.verificationCode}</p>
              </div>
            </div>
          </div>
        </div>

        <div className="flex justify-center space-x-4 mt-6">
          <button
            onClick={() => handleDownloadCertificate(certificate)}
            className="bg-accent text-background px-6 py-3 rounded-lg font-semibold hover:bg-opacity-90 transition-colors"
          >
            Descargar PDF
          </button>
          <button
            onClick={() => handleShareCertificate(certificate)}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Compartir
          </button>
        </div>
      </div>
    </div>
  )

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <LoadingSpinner size="large" />
      </div>
    )
  }

  const filteredCertificates = getFilteredCertificates()

  return (
    <div className="min-h-screen bg-background">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
            Mis Certificados
          </h1>
          <p className="text-text-secondary text-lg">
            Gestiona y comparte tus logros académicos
          </p>
        </div>

        {/* Estadísticas */}
        <div className="grid md:grid-cols-4 gap-6 mb-8">
          <div className="bg-surface rounded-xl p-6 text-center">
            <div className="text-2xl font-bold text-white mb-1">
              {certificatesWithDetails.length}
            </div>
            <div className="text-text-secondary text-sm">Total Certificados</div>
          </div>
          <div className="bg-surface rounded-xl p-6 text-center">
            <div className="text-2xl font-bold text-green-500 mb-1">
              {certificatesWithDetails.filter(c => c.area === user?.selectedArea).length}
            </div>
            <div className="text-text-secondary text-sm">Mi Área</div>
          </div>
          <div className="bg-surface rounded-xl p-6 text-center">
            <div className="text-2xl font-bold text-blue-500 mb-1">
              {certificatesWithDetails.filter(c => {
                const thirtyDaysAgo = new Date()
                thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
                return new Date(c.completedAt) > thirtyDaysAgo
              }).length}
            </div>
            <div className="text-text-secondary text-sm">Últimos 30 días</div>
          </div>
          <div className="bg-surface rounded-xl p-6 text-center">
            <div className="text-2xl font-bold text-accent mb-1">
              {Object.keys(areas).filter(area => 
                certificatesWithDetails.some(c => c.area === area)
              ).length}
            </div>
            <div className="text-text-secondary text-sm">Áreas Cubiertas</div>
          </div>
        </div>

        {/* Filtros */}
        <div className="flex flex-col md:flex-row gap-4 mb-8">
          <div className="flex-1">
            <div className="flex flex-wrap gap-2">
              <button
                onClick={() => setSelectedArea('all')}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  selectedArea === 'all'
                    ? 'bg-accent text-background'
                    : 'bg-surface text-white hover:bg-gray-600'
                }`}
              >
                Todas las Áreas
              </button>
              {Object.entries(areas).map(([key, area]) => (
                <button
                  key={key}
                  onClick={() => setSelectedArea(key)}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    selectedArea === key
                      ? 'bg-accent text-background'
                      : 'bg-surface text-white hover:bg-gray-600'
                  }`}
                >
                  {area.name}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Lista de certificados */}
        {filteredCertificates.length > 0 ? (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredCertificates.map(certificate => (
              <CertificateCard key={certificate.id} certificate={certificate} />
            ))}
          </div>
        ) : (
          <div className="text-center py-16">
            <div className="mb-6">
              <svg className="w-24 h-24 mx-auto text-text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
            <h3 className="text-xl font-bold text-white mb-2">
              {selectedArea === 'all' ? 'No tienes certificados' : `No hay certificados en ${areas[selectedArea]?.name}`}
            </h3>
            <p className="text-text-secondary mb-6">
              Completa cursos para obtener certificados de finalización
            </p>
            <button
              onClick={() => navigate('/courses')}
              className="bg-accent text-background px-6 py-3 rounded-lg font-semibold hover:bg-opacity-90 transition-colors"
            >
              Explorar Cursos
            </button>
          </div>
        )}

        {/* Modal de vista previa */}
        {showPreview && selectedCertificate && (
          <CertificatePreview
            certificate={selectedCertificate}
            onClose={() => {
              setShowPreview(false)
              setSelectedCertificate(null)
            }}
          />
        )}
      </div>
    </div>
  )
}

export default Certificates